Index: Service/CartService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Service;\r\n\r\nimport DAO.CartDAO;\r\nimport DAO.OrderDAO;\r\nimport Entity.Cart;\r\nimport Entity.Product;\r\nimport Entity.Customer;\r\nimport Entity.Order;\r\nimport Database.Database;\r\n\r\nimport java.util.List;\r\n\r\npublic class CartService {\r\n    private final CartDAO cartDAO;\r\n\r\n    //constructor\r\n    public CartService(CartDAO cartDAO) {\r\n        this.cartDAO = cartDAO;\r\n    }\r\n\r\n    //Methods\r\n    public void addToCart(String productName, int quantity) {\r\n\r\n        //Check if the product in the database\r\n        Product databaseProduct = null;\r\n        for (Product product : Database.products) {\r\n            if (product.getName().equals(productName)) {\r\n                databaseProduct = product;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (databaseProduct == null) {\r\n            throw new IllegalArgumentException(\"Product \" + productName + \" not found in the supermarket.\");\r\n        }\r\n\r\n        //get the first cart\r\n        Cart cart = cartDAO.getAllCarts().get(0); //if we have a single cart\r\n        List<Product> products = cart.getAddedProducts();\r\n\r\n        //check if the product was previously added to the cart or not\r\n        boolean inCart = false;\r\n        for (Product product : products) {\r\n            if (product.getName().equals(productName)) {\r\n                product.setQuantity(product.getQuantity() + quantity);\r\n                inCart = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!inCart) {\r\n            Product newProduct = new Product();\r\n            newProduct.setName(databaseProduct.getName());\r\n            newProduct.setPrice(databaseProduct.getPrice());\r\n            newProduct.setQuantity(quantity);\r\n            products.add(newProduct);\r\n        }\r\n\r\n        //update the cart's total price\r\n        double updatedPrice = 0;\r\n        for (Product product : products) {\r\n            updatedPrice += product.getPrice() * product.getQuantity();\r\n        }\r\n\r\n        cart.setTotalPrice(updatedPrice);\r\n\r\n        cartDAO.updateCart(cart);\r\n    }\r\n\r\n    public void removeFromCart(String productName, int quantity) {\r\n        Cart cart = cartDAO.getAllCarts().get(0);\r\n        List<Product> products = cart.getAddedProducts();\r\n\r\n        //check if the product in cart\r\n        Product cartProduct = null;\r\n        for (Product product : products) {\r\n            if (product.getName().equals(productName)) {\r\n                cartProduct = product;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (cartProduct == null) {\r\n            throw new IllegalArgumentException(\"Product \" + productName + \" not found in the cart.\");\r\n        }\r\n\r\n        //if there will be some of this product left in the cart\r\n        if (cartProduct.getQuantity() - quantity > 0)\r\n            cartProduct.setQuantity(cartProduct.getQuantity() - quantity);\r\n        else {\r\n            products.remove(cartProduct);\r\n        }\r\n\r\n        //update the price\r\n        double updatedPrice = 0;\r\n        for (Product product : products) {\r\n            updatedPrice += product.getPrice() * product.getQuantity();\r\n        }\r\n\r\n        cart.setTotalPrice(updatedPrice);\r\n\r\n        cartDAO.updateCart(cart);\r\n\r\n    }\r\n\r\n    public List<Product> viewProducts() {\r\n        Cart cart = cartDAO.getAllCarts().get(0);\r\n        return cart.getAddedProducts();\r\n    }\r\n\r\n\r\n    public void placeOrder() {\r\n        Cart cart = cartDAO.getAllCarts().get(0); // Assuming a single cart\r\n        List<Product> products = cart.getAddedProducts();\r\n\r\n        if (products.isEmpty()) {\r\n            throw new IllegalStateException(\"Cannot place an order. The cart is empty.\");\r\n        }\r\n\r\n        //calculate order totals\r\n        double subtotal = cart.getTotalPrice();\r\n        double discount = calculateDiscount(subtotal);\r\n        double tax = calculateTax(subtotal - discount);\r\n        double shippingFee = calculateShippingFee();\r\n        double checkoutTotal = subtotal - discount + tax + shippingFee;\r\n\r\n        //ceate the order\r\n        Order order = new Order();\r\n        //We can replace all this with arguments constructor??\r\n        order.setOrderId(generateOrderId());\r\n        order.setUserId(1); // Assuming a single user, How to handle multiple users??\r\n        order.setDiscount(discount);\r\n        order.setTax(tax);\r\n        order.setShippingFee(shippingFee);\r\n        order.setCheckOutTotal(checkoutTotal);\r\n        order.setPaymentMethod(\"Credit Card\"); //Default payment methods unless the user sets it in the main\r\n\r\n        //add the order to the database\r\n        OrderDAO orderDAO = new OrderDAO();\r\n        orderDAO.addOrder(order);\r\n\r\n        //clear the cart\r\n        products.clear();\r\n        cart.setTotalPrice(0.0);\r\n        cartDAO.updateCart(cart);\r\n\r\n        //print the order details\r\n        System.out.println(\"Order placed successfully! Order ID: \" + order.getOrderId());\r\n        System.out.println(\"Checkout Total: \" + checkoutTotal);\r\n    }\r\n\r\n    //auxillary functions for place order\r\n    private double calculateDiscount(double subtotal) {\r\n        return subtotal > 100 ? subtotal * 0.10 : 0.0; //if the subtotal larger than 100 the discount will be applied\r\n    }\r\n\r\n    private double calculateTax(double amount) {\r\n        return amount * 0.08;\r\n    }\r\n\r\n    private double calculateShippingFee() {\r\n        return 5.0;\r\n    }\r\n\r\n    private int generateOrderId() {\r\n        OrderDAO orderDAO = new OrderDAO();\r\n        return orderDAO.getAllOrders().size() + 1;\r\n    }\r\n\r\n//I changed the arguments -> no arg, update only interests\r\n//After placing the order we should update the balance\r\npublic void updateCustomerDetails() {\r\n    Cart cart = cartDAO.getAllCarts().get(0); //assume single cart ???\r\n    List<Product> products = cart.getAddedProducts();\r\n\r\n\r\n    //check if the cart have a customer\r\n    Customer customer = null;\r\n    for (Customer c : Database.customers) {\r\n        if (c.getCart() != null && c.getCart().getCartId() == cart.getCartId()) {\r\n            customer = c;\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (customer == null) {\r\n        throw new IllegalStateException(\"No customer associated with the current cart.\");\r\n    }\r\n\r\n    for (Product product : cart.getAddedProducts()) {\r\n       // customer.addInterest(product.getCategory()); // addInterest is not in customer entity yet????\r\n    }\r\n\r\n    System.out.println(\"Customer interests updated successfully for Customer ID: \" + customer.getCustomerId());\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Service/CartService.java b/Service/CartService.java
--- a/Service/CartService.java	(revision 422c402badfd2fc20fdab31f2320f6207ce35d3e)
+++ b/Service/CartService.java	(date 1733743467037)
@@ -64,7 +64,7 @@
 
         cart.setTotalPrice(updatedPrice);
 
-        cartDAO.updateCart(cart);
+        cartDAO.update(cart);
     }
 
     public void removeFromCart(String productName, int quantity) {
@@ -99,7 +99,7 @@
 
         cart.setTotalPrice(updatedPrice);
 
-        cartDAO.updateCart(cart);
+        cartDAO.update(cart);
 
     }
 
@@ -137,7 +137,7 @@
 
         //add the order to the database
         OrderDAO orderDAO = new OrderDAO();
-        orderDAO.addOrder(order);
+        orderDAO.add(order);
 
         //clear the cart
         products.clear();
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_22_PREVIEW\" project-jdk-name=\"22\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 422c402badfd2fc20fdab31f2320f6207ce35d3e)
+++ b/.idea/misc.xml	(date 1733743377980)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_22_PREVIEW" project-jdk-name="22" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_22" default="true" project-jdk-name="22" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
