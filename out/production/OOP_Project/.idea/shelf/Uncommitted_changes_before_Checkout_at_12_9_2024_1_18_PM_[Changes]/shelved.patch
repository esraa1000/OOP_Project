Index: DAO/CustomerDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package DAO;\r\nimport Entity.Customer;\r\nimport Database.Database;\r\n\r\nimport java.util.List;\r\n\r\npublic class CustomerDAO implements GenericDAO<Customer>{\r\n\r\n    public void add(Customer customer){\r\n        Database.customers.add(customer);\r\n\r\n    }\r\n\r\n    public Customer getById(int id){\r\n        for(Customer c: Database.customers){\r\n            if(c.getCustomerId()==id){\r\n                return c;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n\r\n    public void update(Customer customer){\r\n        for(Customer c: Database.customers){\r\n            if(c.getCustomerId()==customer.getCustomerId()){\r\n                //need to figure out a way to update the username, password and dataOfBirth as well\r\n                c.setGender(customer.getGender());\r\n                c.setAddress(customer.getAddress());\r\n                c.setBalance(customer.getBalance());\r\n                c.setInterests(customer.getInterests());\r\n                c.setCart(customer.getCart());\r\n            }\r\n        }\r\n    }\r\n\r\n    public void delete(int customerId){\r\n        Database.customers.removeIf(c -> c.getCustomerId() == customerId);\r\n    }\r\n\r\n    public Customer getCustomerByUsername(String username){\r\n        for(Customer customer: Database.customers){\r\n            if((customer.getUsername()).equals(username))return customer;\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    public List<Customer> getAllCustomers(){\r\n        return Database.customers;\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DAO/CustomerDAO.java b/DAO/CustomerDAO.java
--- a/DAO/CustomerDAO.java	
+++ b/DAO/CustomerDAO.java	
@@ -1,7 +1,10 @@
 package DAO;
+import Entity.Cart;
 import Entity.Customer;
 import Database.Database;
 
+import java.io.IOException;
+import java.util.Date;
 import java.util.List;
 
 public class CustomerDAO implements GenericDAO<Customer>{
@@ -52,5 +55,52 @@
         return Database.customers;
     }
 
+    public void createNewCustomer(String username, String password, Date dateOfBirth,String address)  {
+        // Validate inputs
+        if (username == null || username.isEmpty()) {
+            throw new IllegalArgumentException("Username cannot be null or empty.");
+        }
+        if (password == null || password.isEmpty()) {
+            throw new IllegalArgumentException("Password cannot be null or empty.");
+        }
+        if (dateOfBirth == null) {
+            throw new IllegalArgumentException("Date of Birth cannot be null.");
+        }
+
+        // Check for duplicate username
+        for (Customer existingCustomer : Database.customers) {
+            if (existingCustomer.getUsername().equals(username)) {
+                throw new IllegalArgumentException("A customer with this username already exists.");
+            }
+        }
+
+        // Create and add the new customer
+        Customer customer = new Customer(username, password, dateOfBirth);
+        Database.customers.add(customer);
+
+        try{
+            Database.appendCustomerToFile(customer);
+        }catch(IOException e){
+            System.out.println("failed to save new customer to file");
+            return;
+        }
+
+
+        System.out.println("Customer created successfully: " + customer.getUsername());
+
+
+    }
+
+    public Cart getCustomerCart(Customer customer){
+        if(customer==null){
+            System.out.println("Customer doesn't exist");
+            return null;
+        }
+        else{
+            return customer.getCart();
+        }
+    }
+
+
 
 }
Index: Service/AdminService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Service;\r\nimport DAO.AdminDAO;\r\nimport Entity.Admin;\r\nimport Utility.ValidationUtils;\r\n\r\n\r\nimport java.util.Date;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class AdminService extends UserService {\r\n\r\n    private final AdminDAO adminDAO= new AdminDAO();\r\n\r\n    public void logIn(String username, String password)  {\r\n\r\n        if(username==null || password==null){\r\n            System.out.println(\"Please make sure to fill out all fields\");\r\n            return;\r\n\r\n        }\r\n\r\n        boolean validPassword= ValidationUtils.passwordValidator(password);\r\n        if(!validPassword)return;\r\n\r\n\r\n\r\n        Admin admin=adminDAO.getAdminByUsername(username);\r\n\r\n        if(admin==null){\r\n            System.out.println(\"Account not found, please make sure the username is correct or try to sign up if you're new here.\");\r\n            return;\r\n        }\r\n\r\n        if(!((admin.getPassword()).equals(password))){\r\n            System.out.println(\"Wrong password entered.\");\r\n            return;\r\n        }\r\n\r\n        System.out.println(\"Login successful!\");\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    @Override\r\n    public void signUp(String username, String password, Date dateOfBirth) {\r\n        if(username==null || password==null || dateOfBirth==null){\r\n            System.out.println(\"Please make sure to fill out all fields\");\r\n            return;\r\n        }\r\n\r\n\r\n\r\n        Admin admin= adminDAO.getAdminByUsername(username);\r\n\r\n        if(admin!=null){\r\n            System.out.println(\"Username is already taken, try another one, please\");\r\n        }\r\n\r\n\r\n\r\n        Admin newAdmin= new Admin(username, password,dateOfBirth);\r\n\r\n        Scanner scanner = new Scanner(System.in);\r\n\r\n        System.out.println(\"Enter role:\");\r\n        String role = scanner.nextLine();\r\n\r\n        System.out.println(\"Enter working hours:\");\r\n        int workingHours;\r\n        try {\r\n            workingHours = scanner.nextInt();\r\n        } catch (Exception e) {\r\n            System.out.println(\"Invalid input for working hours.\");\r\n            return;\r\n        }\r\n\r\n        adminSignUp(role,workingHours,newAdmin);\r\n\r\n        adminDAO.add(newAdmin);\r\n\r\n    }\r\n\r\n\r\n\r\n    public void adminSignUp(String role, int workingHours,Admin admin) {\r\n        admin.setRole(role);\r\n        admin.setWorkingHours(workingHours);\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Service/AdminService.java b/Service/AdminService.java
--- a/Service/AdminService.java	
+++ b/Service/AdminService.java	
@@ -1,51 +1,57 @@
 package Service;
-import DAO.AdminDAO;
+import DAO.*;
 import Entity.Admin;
-import Utility.ValidationUtils;
+import Entity.Customer;
+import Entity.Product;
 
 
 import java.util.Date;
+import java.util.List;
 import java.util.Scanner;
 
 
 public class AdminService extends UserService {
 
     private final AdminDAO adminDAO= new AdminDAO();
+    private CustomerDAO customerDAO = new CustomerDAO();
+    private ProductDAO productDAO=new ProductDAO();
+
+
 
-    public void logIn(String username, String password)  {
+    public void logIn(String username,String password){
 
-        if(username==null || password==null){
-            System.out.println("Please make sure to fill out all fields");
-            return;
-
-        }
+         if(!(UserService.isValidUsername(username)))return;
 
-        boolean validPassword= ValidationUtils.passwordValidator(password);
-        if(!validPassword)return;
 
-
+         if(!(UserService.isValidPassword(password)))return;
 
-        Admin admin=adminDAO.getAdminByUsername(username);
+         Admin admin=adminDAO.getAdminByUsername(username);
 
-        if(admin==null){
-            System.out.println("Account not found, please make sure the username is correct or try to sign up if you're new here.");
-            return;
-        }
+         if(admin==null){
+                System.out.println("Account not found, please make sure the username is correct or try to sign up if you're new here.");
+                return;
+         }
 
-        if(!((admin.getPassword()).equals(password))){
-            System.out.println("Wrong password entered.");
-            return;
-        }
-
-        System.out.println("Login successful!");
+         if(!((adminDAO.getPassword(admin)).equals(password))){
+                System.out.println("Wrong password entered.");
+                return;
+         }
+         System.out.println("Login successful!");
 
-
     }
+
+
+
 
 
 
     @Override
     public void signUp(String username, String password, Date dateOfBirth) {
+
+        if(!(UserService.isValidUsername(username)))return;
+
+
+        if(!(UserService.isValidPassword(password)))return;
         if(username==null || password==null || dateOfBirth==null){
             System.out.println("Please make sure to fill out all fields");
             return;
@@ -90,5 +96,40 @@
         admin.setWorkingHours(workingHours);
     }
 
+    public void showAllCustomers(){
+        System.out.println(customerDAO.getAllCustomers());
+    }
+
+    public void showAvailableProducts(){
+        System.out.println(productDAO.getAllProducts());
+    }
+
+
+    public void checkForRestock(){
+        productDAO.checkForRestock();
+    }
+
+    public void deleteProduct(int id){
+        productDAO.delete(id);
+    }
+
+    //ask john to implement createNewProduct
+   /* public void addNewProduct(){
+        productDAO.createNewProduct();
+
+    }*/
+
+
+    public void orderRestock(){
+
+        List<Product> needRestock=productDAO.checkForRestock();
+
+        for(Product product: needRestock){
+
+        }
+
+    }
+
+
 }
 
Index: Service/OrderService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Service;\r\nimport DAO.OrderDAO;\r\nimport Entity.Order;\r\n\r\n\r\npublic class OrderService {\r\n  private final OrderDAO orderDAO;\r\n\r\n  //constructor\r\n  public OrderService(OrderDAO orderDAO ){\r\n      this.orderDAO = orderDAO;\r\n  }\r\n  public void placeOrder(Order order){\r\n      if (order == null || order.getOrderId() < 0 || order.getPaymentMethod() == null) {\r\n          System.out.println(\"Order details are invalid.\");\r\n          return;\r\n      }\r\n\r\n      if (orderDAO.getById(order.getOrderId()) == null) {\r\n          orderDAO.add(order);\r\n          System.out.println(\"Order has been placed successfully.\");\r\n      } else {\r\n          System.out.println(\"An order with this ID already exists.\");\r\n      }\r\n  }\r\n\r\n  public void updateOrder(Order order){\r\n      if (order == null || order.getOrderId() < 0 || order.getPaymentMethod() == null){\r\n          System.out.println(\"order details are invalid\");\r\n          return;\r\n      }\r\n      if (orderDAO.getOrderById((order.getOrderId())) != null){\r\n          orderDAO.updateOrder(order);\r\n          System.out.println(\"order has been updated successfully\");\r\n      }\r\n      else {\r\n          System.out.println(\"order with this ID does not exist\");\r\n      }\r\n  }\r\n  public void cancelOrder(int orderId){\r\n     if (orderId < 0){\r\n         System.out.println(\"invalid order ID\");\r\n     }\r\n     if (orderDAO.getOrderById(orderId) != null){\r\n         orderDAO.deleteOrder(orderId);\r\n         System.out.println(\"order has been cancelled successfully\");\r\n     }\r\n     else {\r\n         System.out.println(\"Order with this ID does not exist\");\r\n     }\r\n  }\r\n  public Order getOrderById(int orderId){\r\n  if (orderId < 0){\r\n      System.out.println(\"invalid Order ID\");\r\n  }\r\n Order order = orderDAO.getOrderById((orderId));\r\n  if (order != null){\r\n      return order;\r\n  } else{\r\n      System.out.println(\"Order with this ID does not exist\");\r\n      return null;\r\n     }\r\n  }\r\n\r\n    public List<Order> getAllOrders() {\r\n        List<Order> orders = orderDAO.getAllOrders();\r\n        if (!orders.isEmpty()) {\r\n            return orders;\r\n        } else {\r\n            System.out.println(\"No orders found.\");\r\n            return new ArrayList<>();\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Service/OrderService.java b/Service/OrderService.java
--- a/Service/OrderService.java	
+++ b/Service/OrderService.java	
@@ -2,6 +2,9 @@
 import DAO.OrderDAO;
 import Entity.Order;
 
+import java.util.ArrayList;
+import java.util.List;
+
 
 public class OrderService {
   private final OrderDAO orderDAO;
@@ -29,8 +32,8 @@
           System.out.println("order details are invalid");
           return;
       }
-      if (orderDAO.getOrderById((order.getOrderId())) != null){
-          orderDAO.updateOrder(order);
+      if (orderDAO.getById((order.getOrderId())) != null){
+          orderDAO.update(order);
           System.out.println("order has been updated successfully");
       }
       else {
@@ -41,8 +44,8 @@
      if (orderId < 0){
          System.out.println("invalid order ID");
      }
-     if (orderDAO.getOrderById(orderId) != null){
-         orderDAO.deleteOrder(orderId);
+     if (orderDAO.getById(orderId) != null){
+         orderDAO.delete(orderId);
          System.out.println("order has been cancelled successfully");
      }
      else {
@@ -53,7 +56,7 @@
   if (orderId < 0){
       System.out.println("invalid Order ID");
   }
- Order order = orderDAO.getOrderById((orderId));
+ Order order = orderDAO.getById((orderId));
   if (order != null){
       return order;
   } else{
